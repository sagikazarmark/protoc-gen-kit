package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const deprecationComment = "// Deprecated: Do not use."

const (
	contextPackage = protogen.GoImportPath("context")
	kitgrpcPackage = protogen.GoImportPath("github.com/go-kit/kit/transport/grpc")
)

func main() {
	options := protogen.Options{}

	options.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}

			generateFile(gen, f)
		}

		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	if len(file.Services) == 0 {
		return
	}

	fileName := file.GeneratedFilenamePrefix + ".kit.go"
	g := gen.NewGeneratedFile(fileName, file.GoImportPath)

	g.P("// Code generated by protoc-gen-kit. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	generateFileContent(file, g)
}

// generateFileContent generates the gRPC service definitions, excluding the package statement.
func generateFileContent(file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	for _, service := range file.Services {
		genService(g, service)
	}
}

func genService(g *protogen.GeneratedFile, service *protogen.Service) {
	serverName := service.GoName + "KitServer"

	g.P("// ", serverName, " is the Go kit server implementation for ", service.GoName, " service.")

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	g.Annotate(serverName, service.Location)

	g.P("type ", serverName, " struct {")
	g.P("*Unimplemented", service.GoName, "Server")
	g.P()
	for _, method := range service.Methods {
		g.Annotate(serverName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		g.P(method.GoName, "Handler ", g.QualifiedGoIdent(kitgrpcPackage.Ident("Handler")))
	}
	g.P("}")
	g.P()

	for _, method := range service.Methods {
		g.P(method.Comments.Leading, "func (s ", serverName, ") ", serverSignature(g, method), "{")
		g.P("_, resp, err := s.", method.GoName, "Handler.ServeGRPC(ctx, req)")
		g.P("if err != nil {")
		g.P("return nil, err")
		g.P("}")
		g.P()
		g.P("return resp.(*", g.QualifiedGoIdent(method.Output.GoIdent), "), nil")
		g.P("}")
		g.P()
	}
}

func serverSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	reqArgs := []string{
		"ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context")),
		"req *" + g.QualifiedGoIdent(method.Input.GoIdent),
	}
	ret := "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"

	return method.GoName + "(" + strings.Join(reqArgs, ", ") + ") " + ret
}
